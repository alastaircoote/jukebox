// Generated by IcedCoffeeScript 1.2.0u
(function() {
  var iced, oauth, pg, self, url, __iced_k, __iced_k_noop,
    __slice = [].slice,
    _this = this;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  };
  __iced_k = __iced_k_noop = function() {};

  pg = require("pg");

  url = require("url");

  oauth = require("node-oauth").OAuth;

  self = this;

  this.useOffline = true;

  this.pgConnectionString = "tcp://jukeuser:juke@127.0.0.1/jukebox";

  this.version = 1.1;

  this.connectDb = function(ret) {
    var client, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "settings.iced",
        funcname: "connectDb"
      });
      pg.connect(_this.pgConnectionString, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            client = arguments[0];
            return err = arguments[1];
          };
        })(),
        lineno: 15
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return console.log(err);
      } else {
        return ret(client);
      }
    });
  };

  this.doGlobals = function(req, ret) {
    ret.header("Access-Control-Allow-Origin", "*");
    ret.header("Access-Control-Allow-Headers", "X-JukeboxUser, X-RdioToken");
    if (req.header("X-RdioToken") !== 'null') {
      req.userRdioToken = req.header("X-RdioToken");
    }
    req.jukeboxUser = req.header("X-JukeboxUser");
    return ret.contentType("application/json");
  };

  this.oauthStart = function(req, res) {
    var client, err, key, oa, result, secret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    self.doGlobals(req, res);
    oa = self.makeRdioProvider();
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "settings.iced",
        funcname: "oauthStart"
      });
      oa.getRequestToken(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            key = arguments[1];
            return secret = arguments[2];
          };
        })(),
        lineno: 46
      }));
      __iced_deferrals._fulfill();
    })(function() {
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "settings.iced",
          funcname: "oauthStart"
        });
        _this.connectDb(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return client = arguments[0];
            };
          })(),
          lineno: 48
        }));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "settings.iced",
            funcname: "oauthStart"
          });
          client.query({
            text: "DELETE FROM oauth_tokens WHERE token = $1",
            values: [key]
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return result = arguments[1];
              };
            })(),
            lineno: 53
          }));
          __iced_deferrals._fulfill();
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "settings.iced",
              funcname: "oauthStart"
            });
            client.query({
              text: "INSERT INTO oauth_tokens (token,secret) values($1,$2)",
              values: [key, secret]
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return result = arguments[1];
                };
              })(),
              lineno: 58
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return res.end(JSON.stringify({
              token: key
            }));
          });
        });
      });
    });
  };

  this.oauthAccessSwitch = function(req, res) {
    var client, err, oa, r, result, t, y, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    self.doGlobals(req, res);
    oa = self.makeRdioProvider();
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "settings.iced",
        funcname: "oauthAccessSwitch"
      });
      self.connectDb(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return client = arguments[0];
          };
        })(),
        lineno: 70
      }));
      __iced_deferrals._fulfill();
    })(function() {
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "settings.iced",
          funcname: "oauthAccessSwitch"
        });
        client.query({
          text: "SELECT secret from oauth_tokens WHERE token = $1",
          values: [req.body.token]
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return result = arguments[1];
            };
          })(),
          lineno: 77
        }));
        __iced_deferrals._fulfill();
      })(function() {
        console.log([req.body.token, result.rows[0].secret, req.body.verifier]);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "settings.iced",
            funcname: "oauthAccessSwitch"
          });
          oa.getAccessToken(req.body.token, result.rows[0].secret, req.body.verifier, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                r = arguments[0];
                t = arguments[1];
                return y = arguments[2];
              };
            })(),
            lineno: 82
          }));
          __iced_deferrals._fulfill();
        })(function() {
          console.log([r, t, y]);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "settings.iced",
              funcname: "oauthAccessSwitch"
            });
            client.query({
              text: "INSERT INTO oauth_tokens (token,secret) values($1,$2)",
              values: [t, y]
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return result = arguments[1];
                };
              })(),
              lineno: 89
            }));
            __iced_deferrals._fulfill();
          })(function() {
            console.log([err, result]);
            return res.end(JSON.stringify({
              token: t
            }));
          });
        });
      });
    });
  };

  this.makeRdioProvider = function() {
    return require('rdio')({
      rdio_api_key: "4bmgdzt2b27qbktxr4kseyn4",
      rdio_api_shared: "8U757b9eWC",
      callback_url: "http://app.jukemob.co/"
    }, oauth);
  };

  this.getPlaybackToken = function() {
    var err, oa, result, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    self.doGlobals(req, res);
    oa = self.makeRdioProvider();
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "settings.iced",
        funcname: "getPlaybackToken"
      });
      client.query({
        text: "SELECT secret from oauth_tokens WHERE token = $1",
        values: [req.userRdioToken]
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return result = arguments[1];
          };
        })(),
        lineno: 114
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return console.log(req.url);
    });
  };

  this.userRoomMaps = [];

}).call(this);
