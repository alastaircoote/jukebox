// Generated by IcedCoffeeScript 1.2.0j
(function() {
  var doRemote, iced, jukebox, __iced_k,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  };
  __iced_k = function() {};

  jukebox = {
    baseUrl: "http://localhost:3000/",
    rdioToken: null,
    init: function() {
      return jukebox.User.init();
    },
    boundFuncs: [],
    bind: function(ev, func) {
      if (!jukebox.boundFuncs[ev]) jukebox.boundFuncs[ev] = [];
      return jukebox.boundFuncs[ev].push(func);
    },
    trigger: function(ev, data) {
      var func, _i, _len, _ref, _results;
      _ref = jukebox.boundFuncs[ev];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        func = _ref[_i];
        _results.push(func(data));
      }
      return _results;
    }
  };

  jukebox.User = {
    doneExistingCheck: false,
    currentUserId: null,
    init: function() {
      var v, varSplit, _i, _len, _results;
      if (document.cookie.indexOf("rdioToken") > -1) {
        varSplit = document.cookie.split(";");
        _results = [];
        for (_i = 0, _len = varSplit.length; _i < _len; _i++) {
          v = varSplit[_i];
          if (v.indexOf("rdioToken") > -1) {
            jukebox.rdioToken = v.split("rdioToken=")[1];
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    },
    create: function(retFunc) {
      var date, newUserId, ret, ___iced_passed_deferral, __iced_deferrals,
        _this = this;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (!this.doneExistingCheck) this.doExistingCheck();
      (function(__iced_k) {
        if (_this.currentUserId) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/alastair/Projects/jukebox/html/js/jukebox.iced",
              funcname: "create"
            });
            jukebox.post("user/checkCredits", {}, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return ret = arguments[0];
                };
              })(),
              lineno: 37
            }));
            __iced_deferrals._fulfill();
          })(function() {
            jukebox.trigger("creditChange", ret.creditsRemaining);
            retFunc({
              userid: _this.currentUserId,
              isNew: false
            });
            return;
            return __iced_k();
          });
        } else {
          return __iced_k();
        }
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/alastair/Projects/jukebox/html/js/jukebox.iced",
            funcname: "create"
          });
          jukebox.post("user/create", {}, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return ret = arguments[0];
              };
            })(),
            lineno: 46
          }));
          __iced_deferrals._fulfill();
        })(function() {
          jukebox.trigger("creditChange", ret.creditsRemaining);
          newUserId = ret.userid;
          date = new Date();
          date.setTime(date.getTime + (30 * 24 * 60 * 60 * 1000));
          document.cookie = "currentUserId=" + newUserId + "; expires=" + date.toGMTString() + "; path=/";
          return retFunc({
            userid: newUserId,
            isNew: true
          });
        });
      });
    },
    doExistingCheck: function() {
      var userId;
      if (document.cookie.indexOf("currentUserId=") === -1) return;
      userId = document.cookie.substr(document.cookie.indexOf("currentUserId=") + "currentUserId=".length);
      userId = userId.split(";")[0];
      return this.currentUserId = userId;
    },
    rdioLogin: function(retFunc) {
      var date, json, ret, token, v, varsSplit, verifier, ___iced_passed_deferral, __iced_deferrals,
        _this = this;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        var _i, _len;
        if (window.location.search !== null && window.location.search !== "") {
          varsSplit = window.location.search.substr(1).split("&");
          token = "";
          verifier = "";
          for (_i = 0, _len = varsSplit.length; _i < _len; _i++) {
            v = varsSplit[_i];
            if (v.indexOf("oauth_token") === 0) {
              token = v.replace("oauth_token=", "");
            }
            if (v.indexOf("oauth_verifier") === 0) {
              verifier = v.replace("oauth_verifier=", "");
            }
          }
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/alastair/Projects/jukebox/html/js/jukebox.iced",
              funcname: "rdioLogin"
            });
            jukebox.post("oauthtokenswitch", {
              token: token,
              verifier: verifier
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return ret = arguments[0];
                };
              })(),
              lineno: 93
            }));
            __iced_deferrals._fulfill();
          })(function() {
            json = JSON.parse(ret);
            date = new Date();
            date.setTime(date.getTime + (30 * 24 * 60 * 60 * 1000));
            document.cookie = "rdioToken=" + json.token + "; expires=" + date.toGMTString() + "; path=/";
            window.location = "/";
            return;
            return __iced_k();
          });
        } else {
          return __iced_k();
        }
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/alastair/Projects/jukebox/html/js/jukebox.iced",
            funcname: "rdioLogin"
          });
          $.post(jukebox.baseUrl + "rdioauth", {
            returnurl: "http://" + window.location.host + "/"
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return ret = arguments[0];
              };
            })(),
            lineno: 107
          }));
          __iced_deferrals._fulfill();
        })(function() {
          date = new Date();
          date.setTime(date.getTime + (30 * 24 * 60 * 60 * 1000));
          document.cookie = "rdioAccessToken=" + JSON.parse(ret).token + "; expires=" + date.toGMTString() + "; path=/";
          return window.location = "https://www.rdio.com/oauth/authorize?oauth_token=" + JSON.parse(ret).token;
        });
      });
    }
  };

  jukebox.Room = {
    currentRoomId: null,
    join: function(roomid, retFunc) {
      var asJson, ret, ___iced_passed_deferral, __iced_deferrals,
        _this = this;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/alastair/Projects/jukebox/html/js/jukebox.iced",
          funcname: "join"
        });
        jukebox.post("room/join", {
          roomid: roomid,
          rdioToken: jukebox.rdioToken
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return ret = arguments[0];
            };
          })(),
          lineno: 121
        }));
        __iced_deferrals._fulfill();
      })(function() {
        asJson = ret;
        _this.currentRoomId = asJson.roomid;
        retFunc({
          roomid: asJson.roomid,
          tracks: asJson.tracks,
          name: asJson.name
        });
        jukebox.Player.updatePlaylist(asJson.tracks);
        jukebox.trigger("playlistUpdated", asJson.tracks);
        if (asJson.playbackToken) return jukebox.Player.load(asJson.playbackToken);
      });
    },
    create: function(opts, retFunc) {
      var newUserObj, ret, ___iced_passed_deferral, __iced_deferrals,
        _this = this;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        if (!jukebox.User.currentUserId) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/alastair/Projects/jukebox/html/js/jukebox.iced",
              funcname: "create"
            });
            jukebox.User.create(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return newUserObj = arguments[0];
                };
              })(),
              lineno: 139
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/alastair/Projects/jukebox/html/js/jukebox.iced",
            funcname: "create"
          });
          jukebox.post("room/create", {
            name: opts.name
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return ret = arguments[0];
              };
            })(),
            lineno: 140
          }));
          __iced_deferrals._fulfill();
        })(function() {
          return retFunc(ret);
        });
      });
    },
    list: function(retFunc) {
      var ret, ___iced_passed_deferral, __iced_deferrals,
        _this = this;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/alastair/Projects/jukebox/html/js/jukebox.iced",
          funcname: "list"
        });
        jukebox.get("room/list", null, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return ret = arguments[0];
            };
          })(),
          lineno: 145
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return retFunc(ret);
      });
    },
    queueTrack: function(trackid, retFunc) {
      var jsoned, ret, ___iced_passed_deferral, __iced_deferrals,
        _this = this;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/alastair/Projects/jukebox/html/js/jukebox.iced",
          funcname: "queueTrack"
        });
        jukebox.post("room/queuetrack", {
          trackid: trackid
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return ret = arguments[0];
            };
          })(),
          lineno: 150
        }));
        __iced_deferrals._fulfill();
      })(function() {
        retFunc();
        jsoned = ret;
        if (jsoned.tracks) jukebox.trigger("playlistUpdated", jsoned.tracks);
        if (jsoned.credits) return jukebox.trigger("creditChange", jsoned.credits);
      });
    }
  };

  jukebox.Tracks = {
    search: function(searchTerm, retFunc) {
      var ret, ___iced_passed_deferral, __iced_deferrals,
        _this = this;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/alastair/Projects/jukebox/html/js/jukebox.iced",
          funcname: "search"
        });
        jukebox.get("tracks/search", {
          search: searchTerm
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return ret = arguments[0];
            };
          })(),
          lineno: 161
        }));
        __iced_deferrals._fulfill();
      })(function() {
        console.log(ret);
        return retFunc(ret);
      });
    }
  };

  jukebox.Player = {
    playerLoaded: false,
    playlistData: null,
    lastPlayState: null,
    currentTrackId: null,
    changePending: false,
    load: function(playbackToken) {
      console.log("loading " + playbackToken);
      $('#api').bind('ready.rdio', function() {
        jukebox.Player.playerLoaded = true;
        jukebox.bind("playlistUpdated", jukebox.Player.updatePlaylist);
        jukebox.Player.changePending = true;
        $(this).rdio().play(jukebox.Player.playlistData[0].trackid);
        if (jukebox.Player.pendingData) {
          return jukebox.Player.updatePlaylist(jukebox.Player.pendingData);
        }
      });
      $('#api').bind('playStateChanged.rdio', function(e, ps) {
        return jukebox.Player.lastPlayState = ps;
      });
      $('#api').bind('playingTrackChanged.rdio', function(e, playingTrack) {
        var d, newTracks, ___iced_passed_deferral, __iced_deferrals,
          _this = this;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        console.log(["track", playingTrack]);
        if (playingTrack !== null && playingTrack.key === jukebox.Player.currentTrackId) {
          console.log("sametrack");
          return;
        }
        if (!playingTrack) {
          console.log(["notrack", jukebox.Player.lastPlayState]);
          if (jukebox.Player.lastPlayState === 2 && jukebox.Player.currentTrackId !== null) {
            if (!jukebox.Player.changePending) {
              console.log(["changingto", jukebox.Player.playlistData[1]]);
              jukebox.Player.changePending = true;
              $(this).rdio().play(jukebox.Player.playlistData[1].trackid);
            }
          }
          return;
        }
        jukebox.Player.changePending = false;
        jukebox.trigger("trackChanged", playingTrack.key);
        $("h4").bind("click", function() {
          console.log("seeking ahead");
          return $('#api').rdio().seek(playingTrack.duration - 10);
        });
        console.log("sdfsdf");
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/alastair/Projects/jukebox/html/js/jukebox.iced"
          });
          jukebox.post("room/updatecurrenttrack", {
            trackid: playingTrack.key,
            oldTrack: jukebox.Player.currentTrackId
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                newTracks = arguments[0];
                return d = arguments[1];
              };
            })(),
            lineno: 214
          }));
          __iced_deferrals._fulfill();
        })(function() {
          jukebox.Player.currentTrackId = playingTrack.key;
          return console.log([newTracks, d]);
        });
      });
      return $('#api').rdio(playbackToken);
    },
    updatePlaylist: function(playlist) {
      console.log("playlist");
      return jukebox.Player.playlistData = playlist;
    }
  };

  doRemote = function(url, data, retFunc, t) {
    return $.ajax({
      url: jukebox.baseUrl + url,
      data: data,
      type: t,
      headers: {
        "X-JukeboxUser": jukebox.User.currentUserId,
        "X-RdioToken": jukebox.rdioToken
      },
      success: retFunc
    });
  };

  jukebox.get = function(url, data, retFunc) {
    return doRemote(url, data, retFunc, "GET");
  };

  jukebox.post = function(url, data, retFunc) {
    return doRemote(url, data, retFunc, "POST");
  };

  window.Jukebox = jukebox;

}).call(this);
