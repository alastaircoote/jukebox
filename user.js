// Generated by IcedCoffeeScript 1.2.0j
(function() {
  var iced, pg, settings, __iced_k,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  };
  __iced_k = function() {};

  pg = require("pg");

  settings = require("./settings.js");

  this.create = function(req, res) {
    var db, err, result, ___iced_passed_deferral, __iced_deferrals,
      _this = this;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    settings.doGlobals(req, res);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "/Users/alastair/Projects/jukebox/user.iced",
        funcname: "create"
      });
      settings.connectDb(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return db = arguments[0];
          };
        })(),
        lineno: 6
      }));
      __iced_deferrals._fulfill();
    })(function() {
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/alastair/Projects/jukebox/user.iced",
          funcname: "create"
        });
        db.query({
          text: "INSERT INTO users (totalcredits) VALUES (20) returning userid"
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return result = arguments[1];
            };
          })(),
          lineno: 10
        }));
        __iced_deferrals._fulfill();
      })(function() {
        console.log(result);
        return res.end(JSON.stringify({
          error: false,
          userid: result.rows[0].userid,
          creditsRemaining: 20
        }));
      });
    });
  };

  this.checkCredits = function(req, res) {
    var db, err, result, ___iced_passed_deferral, __iced_deferrals,
      _this = this;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    settings.doGlobals(req, res);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "/Users/alastair/Projects/jukebox/user.iced",
        funcname: "checkCredits"
      });
      settings.connectDb(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return db = arguments[0];
          };
        })(),
        lineno: 20
      }));
      __iced_deferrals._fulfill();
    })(function() {
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/alastair/Projects/jukebox/user.iced",
          funcname: "checkCredits"
        });
        db.query({
          text: "SELECT totalcredits - (SELECT count(*) from playlistvotes where userid = users.userid) as creditsleft  from users where userid = $1",
          values: [req.jukeboxUser]
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return result = arguments[1];
            };
          })(),
          lineno: 25
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return res.end(JSON.stringify({
          creditsRemaining: result.rows[0].creditsleft
        }));
      });
    });
  };

}).call(this);
